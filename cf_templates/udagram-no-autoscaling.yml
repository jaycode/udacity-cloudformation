Parameters:
  # Add your parameters here
  ProjectName:
    Type: String
    Description: Name of our environment

  VolumeSize:
    Type: String
    Description: Size of the EC3 volume
    Default: "10"

  S3BucketName:
    Type: String
    Description: S3 bucket that stores the static assets of the website.

  KeyPairName:
    Type: String
    Description: Name of key pair

Resources:
  WebAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateData:
        UserData:
          # Fn::Base64: !Sub |
          Fn::Base64: |
            #!/bin/bash
            apt-get update -y
            sudo apt-get install nginx -y
            service nginx start

            # Define the directory where the index.html will be placed
            WEB_DIR="/var/www/html"

            # Create a basic index.html file
            cat <<EOF > index.html
            <!DOCTYPE html>
            <html>
            <head>
                <title>It works! Udagram, Udacity</title>
            </head>
            <body>
                <h1>It works! Udagram, Udacity</h1>
                <p>This website is hosted on Nginx.</p>
            </body>
            </html>
            EOF

            # Copy index.html to the Nginx web directory
            sudo rm -r $WEB_DIR/index.*
            sudo cp index.html $WEB_DIR

            # Reload Nginx to apply changes
            sudo systemctl reload nginx
        ImageId: ami-0c7217cdde317cfec
        KeyName: !Ref KeyPairName
        SecurityGroupIds:
          - !Ref WebServerSecGroup
        InstanceType: t2.micro
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: !Ref VolumeSize
        IamInstanceProfile:
          Name: !Ref WebAppInstanceProfile

  WebAppInstance:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref WebAppLaunchTemplate
        Version: !GetAtt WebAppLaunchTemplate.LatestVersionNumber
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref WebServerSecGroup
      SubnetId:
        Fn::ImportValue: !Sub "${ProjectName}-public-subnet1"

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue:
          !Sub "${ProjectName}-vpc-id"
      GroupDescription: Security group for Application A servers
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  WebAppInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-web-servers"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: 'Allow'
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Policies:
        - PolicyName: s3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - 's3:GetObject'
              - 's3:PutObject'
              Resource:
                - !Sub "arn:aws:s3:::s3://${S3BucketName}/*"

  WebAppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
      - !Ref WebAppInstanceRole

Outputs:
  AppURL:
    Description: "The public URL of the Application"
    Value: !GetAtt WebAppInstance.PublicDnsName
    Export:
      Name: !Sub "${ProjectName}-AppURL"